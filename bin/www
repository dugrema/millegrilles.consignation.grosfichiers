#!/usr/bin/env node

const debug = require('debug')('millegrilles:www')
const logger = require('morgan')
const redis = require("redis")
const fs = require('fs')

const {initialiser: initialiserServer} = require('./server')
const {initialiser: initialiserApp} = require('./app');
const amqpdao = require('../models/amqpdao')
const StoreConsignation = require('../models/storeConsignation')

const CERT_CA_FILE = process.env.MG_MQ_CAFILE,
      CERT_FILE = process.env.MG_MQ_CERTFILE,
      KEY_CA_FILE = process.env.MG_MQ_KEYFILE,
      REDIS_PWD_FILE = process.env.MG_MQ_REDIS_PASSWD

// Preparer certificats, mots de passe
function chargerCredendials() {
  const credentials = {
    millegrille: fs.readFileSync(CERT_CA_FILE).toString('utf-8'),
    cert: fs.readFileSync(CERT_FILE).toString('utf-8'),
    key: fs.readFileSync(KEY_CA_FILE).toString('utf-8'),
    redis_password: fs.readFileSync(REDIS_PWD_FILE).toString('utf-8'),
  }
  return credentials
}

async function init() {

  const credentials = chargerCredendials()

  // Preparer client redis (cache)
  const redisHost = process.env.MG_REDIS_HOST || 'redis',
        redisPortStr = process.env.MG_REDIS_PORT || '6379'

  const redisClient = redis.createClient({
    username: 'client_nodejs',
    password: credentials.redis_password,
    socket: {
      host: redisHost,
      port: Number(redisPortStr), 
      tls: true,
      ca: credentials.millegrille,
      cert: credentials.cert,
      key: credentials.key,
    }
  })
  
  debug("Redis client information :\n%O", redisClient)
  await redisClient.connect()
  await redisClient.ping()

  const storeConsignation = StoreConsignation
  await storeConsignation.init()

  // Connexion AMQ
  const {amqpdao: instAmqpdao} = await amqpdao.init(storeConsignation, {redisClient})
  const idmg = instAmqpdao.pki.idmg

  debug("Initialisation serveur IDMG : %s", idmg)

  // Creer une collection avec la connexion a MQ (format qui supporte hebergement)
  // const rabbitMQParIdmg = {
  //   [idmg]: instAmqpdao
  // }
  //
  // const fctRabbitMQParIdmg = (idmg) => {
  //   return rabbitMQParIdmg[idmg]
  // }

  //const root = express()
  const middleware = [
    logger('dev'),
    (req, res, next) => {
      req.amqpdao = instAmqpdao
      req.rabbitMQ = instAmqpdao
      req.idmg = idmg
      next()
    }
  ]
  // root.use(logger('dev'))

  // Injecter fonction de mapping de RabbitMQ
  // root.use((req, res, next) => {
  //   req.amqpdao = instAmqpdao
  //   req.rabbitMQ = instAmqpdao
  //   req.idmg = idmg
  //   next()
  // })

  const root = await initialiserApp(storeConsignation, {middleware, mq: instAmqpdao})
  const serverInstance = initialiserServer(root)

  // Hook pour un health check regulier (surtout pour connexion MQ)
  setInterval(()=>healthCheck(serverInstance, instAmqpdao).catch(err=>console.error("www.healthCheck ERROR : %O", err)), 60000)
}

async function chargerConfigurationStoreConsignation() {

}

async function healthCheck(server, instAmqpdao) {

  const erreurMq = instAmqpdao.channelError || instAmqpdao.connectionError || false

  debug("www.healthCheck %O status : erreurMq=%s", new Date(), erreurMq)

  if(erreurMq) {
    console.error("www.healthCheck Echec verification, fermeture du serveur")
    instAmqpdao.close()
      .then(()=>{
        server.close()
        process.exit()
      })
  }
}

init()
