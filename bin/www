#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('millegrilles.consignation.grosfichiers:server');
const Spdy = require('spdy');
const FS = require('fs');
const rabbitMQ = require('../util/rabbitMQ');
const {PkiMessages} = require('../messages/pki');
const {TorrentMessages} = require('../messages/torrent');
const {DecrypterFichier} = require('../messages/crypto');
const {GenerateurImages} = require('../messages/images');
const {PublicateurAWS} = require('../messages/aws');
const {GestionnaireMessagesBackup} = require('../messages/backup');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

const hostIp = process.env.HOST || 'dev2.maple.mdugre.info';
const key_path = process.env.PRIVKEY;
const cert_path = process.env.CERT;
const ca_path = process.env.MG_MQ_CAFILE;

/**
 * Create SPDY/http2 server.
 */

const config = {
    hostIp: hostIp,
    cert: FS.readFileSync(cert_path),
    key: FS.readFileSync(key_path),
    ca: FS.readFileSync(ca_path),
    requestCert: true,
    rejectUnauthorized: true,
};

/**
 * Create HTTP server.
 */
const server = Spdy.createServer(config, app).listen(port, () => {
  server.on('error', onError);
  server.on('listening', onListening);
  console.log('Server is listening at https://localhost:' + port + '. Ctrl^C to stop it.');
});

// Connecter a RabbitMQ
let nomMilleGrille = process.env.MG_NOM_MILLEGRILLE || 'sansnom';
let mqConnectionUrl = process.env.MG_MQ_URL || 'amqps://mq:5673/' + nomMilleGrille;
rabbitMQ.connect(mqConnectionUrl)
.then(()=>{
  // Creer objets de connexion a MQ
  const pkiMessageHandler = new PkiMessages(rabbitMQ);
  rabbitMQ.enregistrerListenerConnexion(pkiMessageHandler);

  const torrentMessageHandler = new TorrentMessages(rabbitMQ);
  rabbitMQ.enregistrerListenerConnexion(torrentMessageHandler);

  const decrypterFichier = new DecrypterFichier(rabbitMQ);
  rabbitMQ.enregistrerListenerConnexion(decrypterFichier);

  const generateurImages = new GenerateurImages(rabbitMQ);
  rabbitMQ.enregistrerListenerConnexion(generateurImages);

  rabbitMQ.enregistrerListenerConnexion(new PublicateurAWS(rabbitMQ));

  rabbitMQ.enregistrerListenerConnexion(new GestionnaireMessagesBackup(rabbitMQ));
  
});


// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
/*
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
